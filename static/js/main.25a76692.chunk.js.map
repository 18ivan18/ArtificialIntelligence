{"version":3,"sources":["components/Square.js","components/Board.js","components/Statistics.js","minimax_alpha_beta_pruning/minimax.js","hooks/use-pwa.js","pwa/PWAprompt.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Square","highlightWinSquares","value","updateStateOnClick","className","onClick","Board","board","updateBoard","reset","winningSquares","highlightSquare","i","j","result","length","forEach","element","x","y","generateRow","col","row","map","sq","squares","generateBoard","Statistics","state","jumpTo","moves","history","move","desc","active","location","status","win","player","xIsNext","EMPTY_CELL","max","Math","min","minimax","position","depth","alpha","beta","maximizingPlayer","calculateWinner","evaluate","maxEval","Infinity","minEval","findBestMove","bestVal","bestMove","moveVal","winningMoves","a","b","c","usePWA","useState","supportsPWA","setSupportsPWA","promptInstall","setPromptInstall","useEffect","handler","e","preventDefault","window","addEventListener","removeEventListener","installPWA","evt","prompt","PWAprompt","showBanner","setShowBanner","interval","useRef","current","setTimeout","clearTimeout","version","id","xmlns","viewBox","d","App","initialize","Array","fill","moveNumber","stepNumber","setState","handleClick","slice","prevState","concat","computerMove","item","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.25a76692.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({highlightWinSquares, value, updateStateOnClick}) => {\r\n    return (\r\n        <div className={highlightWinSquares} onClick={updateStateOnClick}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"./Board.css\";\r\n\r\nconst Board = ({ board, updateBoard, reset, winningSquares }) => {\r\n  const highlightSquare = (i, j) => {\r\n    let result = \"square\";\r\n    if (winningSquares.length > 0) {\r\n      winningSquares.forEach((element) => {\r\n        if (element.x === i && element.y === j) {\r\n          result = \"square winningSquare\";\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const generateRow = (col, row) => {\r\n    return col.map((sq, i) => (\r\n      <Square\r\n        key={i}\r\n        highlightWinSquares={highlightSquare(row, i)}\r\n        value={sq}\r\n        updateStateOnClick={() => updateBoard(row, i)}\r\n      ></Square>\r\n    ));\r\n  };\r\n\r\n  const generateBoard = (board) => {\r\n    return board.squares.map((row, i) => (\r\n      <div className=\"row\" key={i}>\r\n        {\" \"}\r\n        {generateRow(row, i)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board\">\r\n        {generateBoard(board)}\r\n        <div className=\"btnCountainer\">\r\n          <button className=\"btn\" onClick={reset}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react'\r\nimport \"./Statistics.css\"\r\n\r\nconst Statistics = ({ state, reset, jumpTo }) => {\r\n    const moves = state.history.map((move, i) => {\r\n        \r\n    const desc = i ? \"Go to move #\" + i : \"Go to game start\";\r\n\r\n      let active = \"\";\r\n      if (move.active) {\r\n        active = \"active\";\r\n      } else {\r\n        active = \"normal\";\r\n      }\r\n      return (\r\n        <li key={i}>\r\n          <button\r\n            className={active}\r\n            key={`${move.location.col}_${move.location.row}`}\r\n            onClick={() => jumpTo(i)}\r\n          >\r\n            {`${desc} (${move.location.row}, ${move.location.col})`}\r\n          </button>\r\n        </li>\r\n      );\r\n    })\r\n    \r\n    return (\r\n        <div className=\"statistics\">\r\n        {state.result && <div className=\"stats\">{state.result.status === \"win\" ? \"WIN\" : \"Draw\"}<br></br><button onClick={reset} className=\"stats\">Play again</button></div>}\r\n        {state.result && state.result.status === \"win\" && <div className=\"stats\">Winner: {state.result.win.player}</div>}\r\n        {!state.result && <div className=\"stats\">Turn player: {state.xIsNext ? \"X\" : \"O\"}</div>}\r\n        <ol>{moves}</ol>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statistics\r\n","const MAXIMIZER_VALUE = 'X';\r\nconst MINIMIZER_VALUE = 'O';\r\nconst EMPTY_CELL = null;\r\nconst max = Math.max;\r\nconst min = Math.min;\r\n\r\nconst minimax = (position, depth, alpha, beta, maximizingPlayer) => {\r\n    const result = calculateWinner(position);\r\n    if (depth === 0 || result) {\r\n        return evaluate(result, depth);\r\n    }\r\n\r\n    if (maximizingPlayer) {\r\n        let maxEval = -Infinity;\r\n        position.forEach((row, i) => row.forEach((sq, j) => {\r\n            if (sq === EMPTY_CELL) {\r\n                position[i][j] = MAXIMIZER_VALUE;;\r\n                // Call minimax recursively and choose the maximum value\r\n                maxEval = max(maxEval,\r\n                    minimax(position, depth - 1, alpha, beta, false));\r\n                alpha = max(alpha, maxEval);\r\n\r\n                // Undo the move\r\n                position[i][j] = EMPTY_CELL;\r\n\r\n                if (beta <= alpha) // no need to continue if there is already better option for the minimizer\r\n                {\r\n                    return maxEval;\r\n                }\r\n            }\r\n        }));\r\n        return maxEval;\r\n    }\r\n    let minEval = +Infinity;\r\n    position.forEach((row, i) => row.forEach((sq, j) => {\r\n        if (sq === EMPTY_CELL) {\r\n            position[i][j] = MINIMIZER_VALUE;;\r\n            // Call minimax recursively and choose the maximum value\r\n            minEval = min(minEval,\r\n                minimax(position, depth - 1, alpha, beta, true));\r\n            beta = min(beta, minEval);\r\n            // Undo the move\r\n            position[i][j] = EMPTY_CELL;\r\n            if (beta <= alpha) // no need to continue if there is already better option for the minimizer\r\n            {\r\n                return minEval;\r\n            }\r\n        }\r\n    }));\r\n\r\n    return minEval;\r\n}\r\n\r\nconst findBestMove = (board, maximizingPlayer) => {\r\n    let bestVal = maximizingPlayer ? -Infinity : +Infinity;\r\n    let bestMove = {};\r\n\r\n    // Traverse all cells, evaluate minimax function for\r\n    // all empty cells. And return the cell with optimal value.\r\n    board.forEach((row, i) => row.forEach((sq, j) => {\r\n        if (sq === EMPTY_CELL) {\r\n            // Make the move\r\n            board[i][j] = maximizingPlayer ? MAXIMIZER_VALUE : MINIMIZER_VALUE;\r\n            // Compute evaluation function for this move\r\n            const moveVal = minimax(board, 10, -Infinity, +Infinity, !maximizingPlayer);\r\n\r\n            // Undo the move\r\n            board[i][j] = EMPTY_CELL;\r\n            if ((maximizingPlayer && moveVal > bestVal) ||\r\n                (!maximizingPlayer && moveVal < bestVal)) {\r\n                bestMove.x = i;\r\n                bestMove.y = j;\r\n                bestVal = moveVal;\r\n            }\r\n        }\r\n    }))\r\n    return bestMove;\r\n}\r\n\r\nconst evaluate = (result, depth) => {\r\n    if (result.status === 'win') {\r\n        if (result.win.player === MAXIMIZER_VALUE) {\r\n            return depth;\r\n        }\r\n        if (result.win.player === MINIMIZER_VALUE) {\r\n            return -depth;\r\n        }\r\n    }\r\n    // else it's a draw\r\n    return 0;\r\n}\r\n\r\nconst winningMoves = [\r\n    [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }],\r\n    [{ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }],\r\n    [{ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }],\r\n    [{ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }],\r\n    [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }],\r\n    [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }],\r\n    [{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }],\r\n    [{ x: 0, y: 2 }, { x: 1, y: 1 }, { x: 2, y: 0 }]\r\n];\r\n\r\nconst calculateWinner = (squares) => {\r\n    let result = {\r\n        status: \"\",\r\n        win: {}\r\n    };\r\n    for (let i = 0; i < winningMoves.length; i++) {\r\n        const [a, b, c] = winningMoves[i];\r\n        if (\r\n            squares[a.x][a.y] &&\r\n            squares[a.x][a.y] === squares[b.x][b.y] &&\r\n            squares[a.x][a.y] === squares[c.x][c.y]\r\n        ) {\r\n            result = {\r\n                status: \"win\",\r\n                win: { player: squares[a.x][a.y], squares: [a, b, c] }\r\n            };\r\n            return result;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < squares.length; i++) {\r\n        for (let j = 0; j < squares[i].length; j++) {\r\n            if (squares[i][j] === null) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    result.status = \"draw\";\r\n    return result;\r\n}\r\n\r\nexport { findBestMove, calculateWinner };","import { useEffect, useState } from \"react\";\r\n\r\nconst usePWA = () => {\r\n  const [supportsPWA, setSupportsPWA] = useState(false);\r\n  const [promptInstall, setPromptInstall] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const handler = (e) => {\r\n      e.preventDefault();\r\n      setSupportsPWA(true);\r\n      setPromptInstall(e);\r\n    };\r\n    window.addEventListener(\"beforeinstallprompt\", handler);\r\n\r\n    return () => window.removeEventListener(\"transitionend\", handler);\r\n  }, []);\r\n\r\n  const onClick = (evt) => {\r\n    evt.preventDefault();\r\n    if (!promptInstall) {\r\n      return;\r\n    }\r\n    promptInstall.prompt();\r\n  };\r\n  return {\r\n    installPWA: onClick,\r\n    supportsPWA,\r\n  };\r\n};\r\n\r\nexport default usePWA;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport usePWA from \"../hooks/use-pwa\";\r\nimport \"./Pwa.css\";\r\n\r\nexport const PWAprompt = () => {\r\n  const { installPWA, supportsPWA } = usePWA();\r\n  const [showBanner, setShowBanner] = useState(supportsPWA);\r\n  const interval = useRef();\r\n\r\n  useEffect(() => {\r\n    if (showBanner) {\r\n      interval.current = setTimeout(() => setShowBanner(false), 7000);\r\n      return;\r\n    }\r\n    clearTimeout(interval.current);\r\n  }, [showBanner]);\r\n\r\n  return (\r\n    <>\r\n      {showBanner && (\r\n        <div className=\"container\">\r\n          <div className=\"header\">Install</div>\r\n          <button className=\"install\" onClick={() => installPWA()}>\r\n            Install\r\n          </button>\r\n          <div className=\"text\">\r\n            Installing takes no storage and provides a quick way to return to\r\n            this app.\r\n          </div>\r\n          <div className=\"close\" onClick={() => setShowBanner(false)}>\r\n            <svg\r\n              version=\"1.1\"\r\n              id=\"Capa_1\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              x=\"0px\"\r\n              y=\"0px\"\r\n              viewBox=\"0 0 512.001 512.001\"\r\n            >\r\n              <g>\r\n                <g>\r\n                  <path\r\n                    d=\"M284.286,256.002L506.143,34.144c7.811-7.811,7.811-20.475,0-28.285c-7.811-7.81-20.475-7.811-28.285,0L256,227.717\r\n\t\t\tL34.143,5.859c-7.811-7.811-20.475-7.811-28.285,0c-7.81,7.811-7.811,20.475,0,28.285l221.857,221.857L5.858,477.859\r\n\t\t\tc-7.811,7.811-7.811,20.475,0,28.285c3.905,3.905,9.024,5.857,14.143,5.857c5.119,0,10.237-1.952,14.143-5.857L256,284.287\r\n\t\t\tl221.857,221.857c3.905,3.905,9.024,5.857,14.143,5.857s10.237-1.952,14.143-5.857c7.811-7.811,7.811-20.475,0-28.285\r\n\t\t\tL284.286,256.002z\"\r\n                  />\r\n                </g>\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import Board from \"./components/Board\";\r\nimport Statistics from \"./components/Statistics\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  calculateWinner,\r\n  findBestMove,\r\n} from \"./minimax_alpha_beta_pruning/minimax\";\r\nimport \"./App.css\";\r\nimport { PWAprompt } from \"./pwa/PWAprompt\";\r\n\r\nconst App = () => {\r\n  const initialize = () => {\r\n    return {\r\n      history: [\r\n        {\r\n          squares: Array(3)\r\n            .fill()\r\n            .map(() => Array(3).fill(null)),\r\n          location: {\r\n            col: 0,\r\n            row: 0,\r\n          },\r\n          active: true,\r\n          moveNumber: 0,\r\n        },\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      result: null,\r\n    };\r\n  };\r\n\r\n  const reset = () => {\r\n    setState(initialize());\r\n  };\r\n\r\n  const jumpTo = (i) => {\r\n    let history = state.history;\r\n    history.forEach((item) => (item.active = false));\r\n    history[i].active = true;\r\n    setState({\r\n      history,\r\n      stepNumber: i,\r\n      xIsNext: i % 2 === 0,\r\n      result: calculateWinner(history[i].squares),\r\n    });\r\n  };\r\n\r\n  // const generateComputerMove = (squares) => {\r\n  //   let possibleMoves = [];\r\n  //   squares.forEach((row, i) => row.forEach((sq, j) => {if(sq === null) possibleMoves.push({x: i, y: j})}));\r\n  //   return possibleMoves[parseInt(possibleMoves.length * Math.random())] || null;\r\n  // }\r\n\r\n  const handleClick = (i, j) => {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    // const squares = current.squares.slice(); // doesn't work!??\r\n\r\n    // obv works\r\n    const squares = Array(3)\r\n      .fill()\r\n      .map(() => Array(3).fill(null));\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        squares[i][j] = current.squares[i][j];\r\n      }\r\n    }\r\n\r\n    if (calculateWinner(squares) || squares[i][j]) {\r\n      return;\r\n    }\r\n\r\n    squares[i][j] = state.xIsNext ? \"X\" : \"O\";\r\n    history[state.stepNumber].active = false;\r\n    setState((prevState) => ({\r\n      history: history.concat([\r\n        {\r\n          squares,\r\n          location: {\r\n            row: i + 1,\r\n            col: j + 1,\r\n          },\r\n          active: true,\r\n          moveNumber: history.length,\r\n        },\r\n      ]),\r\n      xIsNext: !prevState.xIsNext,\r\n      stepNumber: history.length,\r\n      result: calculateWinner(squares),\r\n    }));\r\n  };\r\n\r\n  const [state, setState] = useState(initialize());\r\n  useEffect(\r\n    () => {\r\n      if (\r\n        !state.xIsNext &&\r\n        !state.result &&\r\n        state.history.length - 1 === state.stepNumber\r\n      ) {\r\n        // const computerMove = generateComputerMove(state.history[state.stepNumber].squares);\r\n        const computerMove = findBestMove(\r\n          state.history[state.stepNumber].squares,\r\n          false\r\n        );\r\n        handleClick(computerMove.x, computerMove.y);\r\n      }\r\n    }, // eslint-disable-next-line\r\n    [state.xIsNext, state.history, state.stepNumber]\r\n  );\r\n\r\n  const getCurrent = () => {\r\n    return state.history[state.stepNumber];\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <PWAprompt />\r\n      <Board\r\n        board={getCurrent()}\r\n        reset={() => reset()}\r\n        updateBoard={(i, j) => handleClick(i, j)}\r\n        winningSquares={\r\n          state.result && state.result.status === \"win\"\r\n            ? state.result.win.squares\r\n            : []\r\n        }\r\n      ></Board>\r\n      <Statistics\r\n        state={state}\r\n        setState={setState}\r\n        jumpTo={jumpTo}\r\n        reset={() => reset()}\r\n      ></Statistics>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}