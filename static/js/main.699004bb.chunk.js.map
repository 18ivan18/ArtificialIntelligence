{"version":3,"sources":["components/Square.js","components/Board.js","components/Statistics.js","minimax_alpha_beta_pruning/minimax.js","App.js","reportWebVitals.js","index.js"],"names":["Square","highlightWinSquares","value","updateStateOnClick","className","onClick","Board","board","updateBoard","reset","winningSquares","highlightSquare","i","j","result","length","forEach","element","x","y","generateRow","col","row","map","sq","squares","generateBoard","Statistics","state","jumpTo","moves","history","move","desc","active","location","status","win","player","xIsNext","EMPTY_CELL","max","Math","min","minimax","position","depth","alpha","beta","maximizingPlayer","calculateWinner","evaluate","maxEval","Infinity","minEval","findBestMove","bestVal","bestMove","moveVal","winningMoves","a","b","c","App","initialize","Array","fill","moveNumber","stepNumber","setState","handleClick","slice","current","prevState","concat","useState","useEffect","computerMove","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.699004bb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({highlightWinSquares, value, updateStateOnClick}) => {\r\n    return (\r\n        <div className={highlightWinSquares} onClick={updateStateOnClick}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"./Board.css\";\r\n\r\nconst Board = ({ board, updateBoard, reset, winningSquares }) => {\r\n  const highlightSquare = (i, j) => {\r\n    let result = \"square\";\r\n    if (winningSquares.length > 0) {\r\n      winningSquares.forEach((element) => {\r\n        if (element.x === i && element.y === j) {\r\n          result = \"square winningSquare\";\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const generateRow = (col, row) => {\r\n    return col.map((sq, i) => (\r\n      <Square\r\n        key={i}\r\n        highlightWinSquares={highlightSquare(row, i)}\r\n        value={sq}\r\n        updateStateOnClick={() => updateBoard(row, i)}\r\n      ></Square>\r\n    ));\r\n  };\r\n\r\n  const generateBoard = (board) => {\r\n    return board.squares.map((row, i) => (\r\n      <div className=\"row\" key={i}>\r\n        {\" \"}\r\n        {generateRow(row, i)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board\">\r\n        {generateBoard(board)}\r\n        <div className=\"btnCountainer\">\r\n          <button className=\"btn\" onClick={reset}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react'\r\nimport \"./Statistics.css\"\r\n\r\nconst Statistics = ({ state, reset, jumpTo }) => {\r\n    const moves = state.history.map((move, i) => {\r\n        \r\n    const desc = i ? \"Go to move #\" + i : \"Go to game start\";\r\n\r\n      let active = \"\";\r\n      if (move.active) {\r\n        active = \"active\";\r\n      } else {\r\n        active = \"normal\";\r\n      }\r\n      return (\r\n        <li key={i}>\r\n          <button\r\n            className={active}\r\n            key={`${move.location.col}_${move.location.row}`}\r\n            onClick={() => jumpTo(i)}\r\n          >\r\n            {`${desc} (${move.location.row}, ${move.location.col})`}\r\n          </button>\r\n        </li>\r\n      );\r\n    })\r\n    \r\n    return (\r\n        <div className=\"statistics\">\r\n        {state.result && <div className=\"stats\">{state.result.status === \"win\" ? \"WIN\" : \"Draw\"}<br></br><button onClick={reset} className=\"stats\">Play again</button></div>}\r\n        {state.result && state.result.status === \"win\" && <div className=\"stats\">Winner: {state.result.win.player}</div>}\r\n        {!state.result && <div className=\"stats\">Turn player: {state.xIsNext ? \"X\" : \"O\"}</div>}\r\n        <ol>{moves}</ol>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statistics\r\n","const MAXIMIZER_VALUE = 'X';\r\nconst MINIMIZER_VALUE = 'O';\r\nconst EMPTY_CELL = null;\r\nconst max = Math.max;\r\nconst min = Math.min;\r\n\r\nconst minimax = (position, depth, alpha, beta, maximizingPlayer) => {\r\n    const result = calculateWinner(position);\r\n    if (depth === 0 || result) {\r\n        return evaluate(result, depth);\r\n    }\r\n\r\n    if (maximizingPlayer) {\r\n        let maxEval = -Infinity;\r\n        position.forEach((row, i) => row.forEach((sq, j) => {\r\n            if (sq === EMPTY_CELL) {\r\n                position[i][j] = MAXIMIZER_VALUE;;\r\n                // Call minimax recursively and choose the maximum value\r\n                maxEval = max(maxEval,\r\n                    minimax(position, depth - 1, alpha, beta, false));\r\n                alpha = max(alpha, maxEval);\r\n\r\n                // Undo the move\r\n                position[i][j] = EMPTY_CELL;\r\n\r\n                if (beta <= alpha) // no need to continue if there is already better option for the minimizer\r\n                {\r\n                    return maxEval;\r\n                }\r\n            }\r\n        }));\r\n        return maxEval;\r\n    }\r\n    let minEval = +Infinity;\r\n    position.forEach((row, i) => row.forEach((sq, j) => {\r\n        if (sq === EMPTY_CELL) {\r\n            position[i][j] = MINIMIZER_VALUE;;\r\n            // Call minimax recursively and choose the maximum value\r\n            minEval = min(minEval,\r\n                minimax(position, depth - 1, alpha, beta, true));\r\n            beta = min(beta, minEval);\r\n            // Undo the move\r\n            position[i][j] = EMPTY_CELL;\r\n            if (beta <= alpha) // no need to continue if there is already better option for the minimizer\r\n            {\r\n                return minEval;\r\n            }\r\n        }\r\n    }));\r\n\r\n    return minEval;\r\n}\r\n\r\nconst findBestMove = (board, maximizingPlayer) => {\r\n    let bestVal = maximizingPlayer ? -Infinity : +Infinity;\r\n    let bestMove = {};\r\n\r\n    // Traverse all cells, evaluate minimax function for\r\n    // all empty cells. And return the cell with optimal value.\r\n    board.forEach((row, i) => row.forEach((sq, j) => {\r\n        if (sq === EMPTY_CELL) {\r\n            // Make the move\r\n            board[i][j] = maximizingPlayer ? MAXIMIZER_VALUE : MINIMIZER_VALUE;\r\n            // Compute evaluation function for this move\r\n            const moveVal = minimax(board, 10, -Infinity, +Infinity, !maximizingPlayer);\r\n\r\n            // Undo the move\r\n            board[i][j] = EMPTY_CELL;\r\n            if ((maximizingPlayer && moveVal > bestVal) ||\r\n                (!maximizingPlayer && moveVal < bestVal)) {\r\n                bestMove.x = i;\r\n                bestMove.y = j;\r\n                bestVal = moveVal;\r\n            }\r\n        }\r\n    }))\r\n    return bestMove;\r\n}\r\n\r\nconst evaluate = (result, depth) => {\r\n    if (result.status === 'win') {\r\n        if (result.win.player === MAXIMIZER_VALUE) {\r\n            return depth;\r\n        }\r\n        if (result.win.player === MINIMIZER_VALUE) {\r\n            return -depth;\r\n        }\r\n    }\r\n    // else it's a draw\r\n    return 0;\r\n}\r\n\r\nconst winningMoves = [\r\n    [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }],\r\n    [{ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }],\r\n    [{ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }],\r\n    [{ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }],\r\n    [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }],\r\n    [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }],\r\n    [{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }],\r\n    [{ x: 0, y: 2 }, { x: 1, y: 1 }, { x: 2, y: 0 }]\r\n];\r\n\r\nconst calculateWinner = (squares) => {\r\n    let result = {\r\n        status: \"\",\r\n        win: {}\r\n    };\r\n    for (let i = 0; i < winningMoves.length; i++) {\r\n        const [a, b, c] = winningMoves[i];\r\n        if (\r\n            squares[a.x][a.y] &&\r\n            squares[a.x][a.y] === squares[b.x][b.y] &&\r\n            squares[a.x][a.y] === squares[c.x][c.y]\r\n        ) {\r\n            result = {\r\n                status: \"win\",\r\n                win: { player: squares[a.x][a.y], squares: [a, b, c] }\r\n            };\r\n            return result;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < squares.length; i++) {\r\n        for (let j = 0; j < squares[i].length; j++) {\r\n            if (squares[i][j] === null) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    result.status = \"draw\";\r\n    return result;\r\n}\r\n\r\nexport { findBestMove, calculateWinner };","import Board from \"./components/Board\";\r\nimport Statistics from \"./components/Statistics\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  calculateWinner,\r\n  findBestMove,\r\n} from \"./minimax_alpha_beta_pruning/minimax\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const initialize = () => {\r\n    return {\r\n      history: [\r\n        {\r\n          squares: Array(3)\r\n            .fill()\r\n            .map(() => Array(3).fill(null)),\r\n          location: {\r\n            col: 0,\r\n            row: 0,\r\n          },\r\n          active: true,\r\n          moveNumber: 0,\r\n        },\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      result: null,\r\n    };\r\n  };\r\n\r\n  const reset = () => {\r\n    setState(initialize());\r\n  };\r\n\r\n  const jumpTo = (i) => {\r\n    let history = state.history;\r\n    history.forEach((item) => (item.active = false));\r\n    history[i].active = true;\r\n    setState({\r\n      history,\r\n      stepNumber: i,\r\n      xIsNext: i % 2 === 0,\r\n      result: calculateWinner(history[i].squares),\r\n    });\r\n  };\r\n\r\n  // const generateComputerMove = (squares) => {\r\n  //   let possibleMoves = [];\r\n  //   squares.forEach((row, i) => row.forEach((sq, j) => {if(sq === null) possibleMoves.push({x: i, y: j})}));\r\n  //   return possibleMoves[parseInt(possibleMoves.length * Math.random())] || null;\r\n  // }\r\n\r\n  const handleClick = (i, j) => {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    // const squares = current.squares.slice(); // doesn't work!??\r\n\r\n    // obv works\r\n    const squares = Array(3)\r\n      .fill()\r\n      .map(() => Array(3).fill(null));\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        squares[i][j] = current.squares[i][j];\r\n      }\r\n    }\r\n\r\n    if (calculateWinner(squares) || squares[i][j]) {\r\n      return;\r\n    }\r\n\r\n    squares[i][j] = state.xIsNext ? \"X\" : \"O\";\r\n    history[state.stepNumber].active = false;\r\n    setState((prevState) => ({\r\n      history: history.concat([\r\n        {\r\n          squares,\r\n          location: {\r\n            row: i + 1,\r\n            col: j + 1,\r\n          },\r\n          active: true,\r\n          moveNumber: history.length,\r\n        },\r\n      ]),\r\n      xIsNext: !prevState.xIsNext,\r\n      stepNumber: history.length,\r\n      result: calculateWinner(squares),\r\n    }));\r\n  };\r\n\r\n  const [state, setState] = useState(initialize());\r\n  useEffect(\r\n    () => {\r\n      if (\r\n        !state.xIsNext &&\r\n        !state.result &&\r\n        state.history.length - 1 === state.stepNumber\r\n      ) {\r\n        // const computerMove = generateComputerMove(state.history[state.stepNumber].squares);\r\n        const computerMove = findBestMove(\r\n          state.history[state.stepNumber].squares,\r\n          false\r\n        );\r\n        handleClick(computerMove.x, computerMove.y);\r\n      }\r\n    }, // eslint-disable-next-line\r\n    [state.xIsNext, state.history, state.stepNumber]\r\n  );\r\n\r\n  const getCurrent = () => {\r\n    return state.history[state.stepNumber];\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board\r\n        board={getCurrent()}\r\n        reset={() => reset()}\r\n        updateBoard={(i, j) => handleClick(i, j)}\r\n        winningSquares={\r\n          state.result && state.result.status === \"win\"\r\n            ? state.result.win.squares\r\n            : []\r\n        }\r\n      ></Board>\r\n      <Statistics\r\n        state={state}\r\n        setState={setState}\r\n        jumpTo={jumpTo}\r\n        reset={() => reset()}\r\n      ></Statistics>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}